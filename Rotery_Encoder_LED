#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

#include <xc.h>
#include <stdio.h>
#include <stdlib.h>

#define _XTAL_FREQ 2000000 //Crystal Oscillator Frequency

#define Encoder_SW PORTBbits.RB3 //encoder switch
#define Encoder_DT PORTBbits.RB0 //encoder dt
#define Encoder_CLK PORTBbits.RB7 //encoder clock

//rotary encoder state variables
int lastStateCLK; //prev state of rotary encoder clock
//unsigned long lastButton = 0; //debounce rot switch
//int btnState;

int brightness = 20;
int colorIncrement = 2;
//need to add a default color temperature

void main(void) {
    
    TRISB = 0x00;
    PORTB = 0x00;
    ANSEL = 0x00;
    ANSELH = 0x00;
    T2CON = 0x04; //No pre/post-scaler config
    PR2 = 101; //PWM Freq/Cycle time
    
    TRISBbits.TRISB0 = 1;
    TRISBbits.TRISB3 = 1;
    TRISBbits.TRISB7 = 1;
    
    PSTRCONbits.STRB = 1; //Steering Enable bit B
    PSTRCONbits.STRC = 1; //Steering Enable bit C
    PSTRCONbits.STRD = 1; //Steering Enable bit D
    
    //P1C = RB1, P1B = RB2, P1D = RB4
    CCP1CONbits.P1M = 0x00; //Single output; P1A modulated; P1B, P1C, P1D assigned as port pins
    CCP1CONbits.CCP1M = 0b1100; //Configure P1B, P1C, & P1D (RGB LEDs)
    
    //initial conditions
    lastStateCLK = Encoder_CLK;
    CCPR1L = brightness; 
    
    while(1){
        
        if(Encoder_CLK != lastStateCLK && Encoder_CLK == 1){
            //counter clockwise
            if(Encoder_DT != Encoder_CLK && brightness > 0){
                brightness = brightness - 10;
                CCPR1L = brightness;
            }
            //clockwise
            else if(Encoder_DT == Encoder_CLK && brightness < 100){
               brightness = brightness + 10;
               CCPR1L = brightness;
            }
        }
        
        lastStateCLK = Encoder_CLK;
        
        // Color control
        
//        btnState = Encoder_SW;
        
//        if (Encoder_SW == 1){ // Button press
//            while(Encoder_SW == 1); // Delay
//            switch(colorIncrement){
//                case 1: // Coldest color temp
//                    CCPR1L = 100;
//                    colorIncrement++;
//                    break;
//                case 2:
//                    CCPR1L = 80;
//                    colorIncrement++;
//                    break;
//                case 3:
//                    CCPR1L = 60;
//                    colorIncrement++;
//                    break;
//                case 4:
//                    CCPR1L = 20;
//                    colorIncrement++;
//                    break;
//                case 5: // Warmest color temp
//                    CCPR1L = 0;
//                    colorIncrement = 1;
//                    break;
//            }
//        }
    
        __delay_ms(1);
    }
    
    return;
}
